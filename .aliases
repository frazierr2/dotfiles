# ===============================================
#                  GIT ALIASES
# ===============================================
alias db='git branch -d'
alias DB='git branch -D'
alias g='git'
alias ga='git add'
alias gaa='git add .'
alias gac='git add . && git commit -m'
alias gb='git branch'
alias gc='git commit -m'
alias gd='git diff'
alias gm='git merge'
alias go='git checkout'
alias gob='git checkout -b'
alias gom='git checkout develop'
alias gp='git push'
alias gpfwl='git push --force-with-lease'
alias gpu='git pull'
alias gr='git rebase'
alias gra='git rebase --abort'
alias grac='git add . && git rebase --continue'
alias grc='git rebase --continue'
alias grm='git rebase develop'
alias grs='git rebase --skip'
alias gs='git status'

#
#   GIT ALIAS FUNCTIONS
#
create() {
  local branchName=$1

  # Explanation for the parameter expansion: https://unix.stackexchange.com/questions/594841/how-do-i-assign-a-value-to-a-bash-variable-iff-that-variable-is-null-unassigned
  local remoteName=${2:-origin}

  git pull
  git checkout -b "$branchName"

  # Explanation of the below black magic: https://serverfault.com/questions/989742/tee-and-assigning-to-variable/989827#989827
  { mergeRequestURL=$(git push -u "$remoteName" "$branchName"  2>&1  | tee /dev/fd/3 | grep merge_request | cut -d ':' -f2,3 | tr -d ' '); } 3>&1

  # Open Merge Request URL
  open -u "$mergeRequestURL"
}

dLocalAndRemote() {
  for arg in "$@"
  do
    git branch -d $arg
    git push origin -d $arg
  done
}

pid() {
  ps aux | grep $1
}


# ===============================================
#                  FOLDER ALIASES
# ===============================================
alias config='code ~/' #To VS Code into home directory to see all files that a ls -al would show
alias aliases='code ~/.aliases'
alias zshconfig='code ~/.zshrc'
alias refresh_z='source ~/.zshrc && echo "Refreshed"'
alias sudo_z='vi ~/.zshrc'

alias helper='cd ~/Documents/code/helper/'
alias hcode='cd ~/Documents/code/helper/ && code .'
alias hosts='sudo vi /etc/hosts'
alias helperserver='nodemon --inspect helper.js'
alias serve='npm run serve'

# ===============================================
#                  DOCKER ALIASES
# ===============================================
alias dc='docker compose'
alias dcu='docker compose up -d' #Start Docker in detached mode
alias dcd='docker compose down' #Stop Docker
alias dcps='docker compose ps' # See what is running in Docker
alias dchistory='history | grep docker'
# ===============================================
#                  RANDOM ALIASES
# ===============================================
alias cl='clear'
alias ip='ipconfig getifaddr en0'

# Use alias instead of git to update dotfiles.. aka dotfiles status instead of git status
alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME'